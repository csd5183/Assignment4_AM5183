#include "vec3.h"
#include "std_lib_facilities.h"
#include <vector>
#include <string>
#include <fstream>
using namespace std;


// A

class Pixel {
public:
    Pixel(int positionx, int positiony, const vec3& color)
        : positionx(positionx), positiony(positiony), color(color) {}
    
    // setters
    void set_positionx(int x) { positionx = x; }
    void set_positiony(int y) { positiony = y; }
    void set_color(const vec3& c) { color = c; }
    // getters
    int get_positionx() const { return positionx; }
    int get_positiony() const { return positiony; }
    vec3 get_color() const { return color; }
private:
    int positionx;
    int positiony;
    vec3 color;
};

// B

class ImageData {
public:
    ImageData(const std::string& filename) {
        read_PPM(filename);
    }
    // setters
    void set_width(int w) { width = w; }
    void set_height(int h) { height = h; }

    // getters
    int get_width() const { return width; }
    int get_height() const { return height; }
    vector<vector<Pixel>> get_image() const { return image; }

private:
    vector<vector<Pixel>> image;
    int width;
    int height;

    void read_PPM(const string& filename) {
        ifstream file(filename);
        if (!file.is_open()) {      
            return;
        }


        file >> width >> height;
        image.resize(height, vector<Pixel>(width));

        int max_value;
        file >> max_value;

       for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
        int r, g, b;
        file >> r >> g >> b; 
        // creating a vec3 object for the color
        vec3 color(r, g, b);
        // creating a Pixel object with position and color
        image[y][x] = Pixel(x, y, color);
    }
  }

        file.close();
    }
};


int main()
{
  
}


